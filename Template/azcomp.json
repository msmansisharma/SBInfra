{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }

      },

       "logAnalyticsWorkspace": {
        "type": "string",
        "metadata": {
          "description": "LA workspace name"
        }
      },
     "automationaccount": {
        "type": "string",
        "metadata": {
          "description": "Name of Automation account to be created"
        }
      },
        "storageaccountname": {
        "type": "string",
        "metadata": {
          "description": "Name of storage account to be created"
        }
      },
      "key-vault-name": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the key vault."
        }
      },
    
         "enabledForDeployment": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Virtual Machines are permitted to retrieve keys stored as secrets from the key vault."
        }
      },
      "enabledForDiskEncryption": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
        }
      },
      "enabledForTemplateDeployment": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
        }
      },
      "tenantId": {
        "type": "string",
        "defaultValue": "[subscription().tenantId]",
        "metadata": {
          "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
        }
      },
      "objectId": {
        "type": "string",
        "metadata": {
          "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
        }
      },
       "uobjectId": {
        "type": "string",
        "metadata": {
          "description": "Object ID for user account to read policies"
        }
      },
      "keysPermissions": {
        "type": "array",
        "defaultValue": [
        "get","list","update","create","import","delete","recover","backup","restore"
        ],
        "metadata": {
          "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
        }
      },
      "secretsPermissions": {
        "type": "array",
        "defaultValue": [
        "get","list","set","delete","recover","backup","restore"
        ],
        "metadata": {
          "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
        }
      },
      "skuName": {
        "type": "string",
        "defaultValue": "Premium",
        "allowedValues": [
          "Standard","Premium"
        ],
        "metadata": {
          "description": "Specifies whether the key vault is a standard vault or a premium vault."
        }
      },
      "identityName": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the user-assigned managed identity."
        }
      },
      "certificatesPermissions": {
        "type": "array",
        "defaultValue": [
          "get","list","update","create"
        ],
        "metadata": {
          "description": "Specifies the permissions to keys in the vault. Valid values are: all, get, list, update, create, import, delete, recover, backup, restore, manage contacts, manage certificate authorities, get certificate authorities, list certificate authorities, set certificate authorities, delete certificate authorities."
        }
      },
      "utcValue": {
        "type": "string",
        "defaultValue": "[utcNow()]"
      }
    },
 
    "variables": {
"Updates": {
        "name": "[concat('Updates', '(', parameters('logAnalyticsWorkspace'), ')')]",
        "galleryName": "Updates"
      },

      "bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
      "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
    },
    "resources": [
       {
        "apiVersion": "2017-10-01",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('storageaccountname')]",
        "location": "[parameters('location')]",
         "sku": {
             "name": "Standard_LRS",
             "tier": "Standard"
            },
         "kind": "StorageV2",
        "properties": {
          "accountType": "Standard_LRS"
        }
      },
        
        {
            "name": "[parameters('automationaccount')]",
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2015-10-31",
            "location": "[resourceGroup().location]",
            "tags": {
            },
            "properties": {
                "sku": {
                    "name": "Free"
                }
            }
        },
        {
            "name": "[parameters('logAnalyticsWorkspace')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "dependsOn": [
        "[parameters('automationaccount')]"
      ],
            "properties": {
                "sku": {
                    "name": "Free"
                },
                "features": {
                    "searchVersion": 1
                }
            }
        },
        
{
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('location')]",
            "name": "[variables('Updates').name]",
            "type": "Microsoft.OperationsManagement/solutions",
            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.OperationsManagement/solutions/', variables('Updates').name)]",
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspace'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspace'))]"
            },
            "plan": {
                "name": "[variables('Updates').name]",
                "publisher": "Microsoft",
                "promotionCode": "",
                "product": "[concat('OMSGallery/', variables('Updates').galleryName)]"
            }
        },




        {
      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspace'), '/' , 'Automation')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[parameters('logAnalyticsWorkspace')]",
        "[parameters('automationaccount')]"
      ],
      "properties": {
        "resourceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationaccount'))]"
      }
    },
        
              {
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "apiVersion": "2018-11-30",
        "name": "[parameters('identityName')]",
        "location": "[resourceGroup().location]"
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2018-09-01-preview",
        "name": "[variables('bootstrapRoleAssignmentId')]",
        "dependsOn": [
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
        ],
        "properties": {
          "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
          "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
          "scope": "[resourceGroup().id]",
          "principalType": "ServicePrincipal"
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2019-09-01",
        "name": "[parameters('key-vault-name')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "enabledForDeployment": "[parameters('enabledForDeployment')]",
          "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
          "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
          "enableSoftDelete": true,
          "enablePurgeProtection": true,
          "softDeleteRetentionInDays": 7,
          "tenantId": "[parameters('tenantId')]",
          "accessPolicies": [
            {
              "objectId": "[parameters('objectId')]",
              "tenantId": "[parameters('tenantId')]",
              "permissions": {
                "keys": "[parameters('keysPermissions')]",
                "secrets": "[parameters('secretsPermissions')]",
                "certificates": "[parameters('certificatesPermissions')]"
              }
            },

            {
              "objectId": "[parameters('uobjectId')]",
              "tenantId": "[parameters('tenantId')]",
              "permissions": {
                "keys": "[parameters('keysPermissions')]",
                "secrets": "[parameters('secretsPermissions')]",
                "certificates": "[parameters('certificatesPermissions')]"
              }
            },
            {
              "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
              "tenantId": "[parameters('tenantId')]",
              "permissions": {
                "keys": "[parameters('keysPermissions')]",
                "secrets": "[parameters('secretsPermissions')]",
                "certificates": "[parameters('certificatesPermissions')]"
              }
            }
          ],
          "sku": {
            "name": "[parameters('skuName')]",
            "family": "A"
          },
          "networkAcls": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2019-10-01-preview",
        "name": "addKeyDiskEncryptionSet",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', parameters('key-vault-name'))]",
          "[resourceId('Microsoft.Authorization/roleAssignments', variables('bootstrapRoleAssignmentId'))]"
        ],
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]": {
            }
          }
        },
        "kind": "AzurePowerShell",
        "properties": {
          "forceUpdateTag": "[parameters('utcValue')]",
          "azPowerShellVersion": "3.0",
          "timeout": "PT30M",
          "arguments": "[format(' -VaultName {0} -ResourceGroupName {1} -LocationName {2}', parameters('key-vault-name'), resourceGroup().name, resourceGroup().location)]",
          "scriptContent": "param(\r\n                  [string] [Parameter(Mandatory=$true)] $VaultName,\r\n                  [string] [Parameter(Mandatory=$true)] $ResourceGroupName,\r\n                  [string] [Parameter(Mandatory=$true)] $LocationName\r\n                )\r\n          \r\n                $ErrorActionPreference = 'Stop'\r\n                $DeploymentScriptOutputs = @{}\r\n                $KeyName = 'sb-az-deploy-script-encryption-key'\r\n                $DiskEncryptionSetName = 'AzureSubscription-Dan-Az-Sandbox'\r\n                $kekEncryptionUrlSecretName = 'az-disk-key-kek-kid'\r\n                # Get KeyVault\r\n                $kv =  Get-AzKeyVault -Name $VaultName -ResourceGroupName $ResourceGroupName\r\n                \r\n                # Check if Disk Encryption Key exists\r\n                $diskEncrptKey = `\r\n                  (Get-AzKeyVaultKey `\r\n                      -VaultName $VaultName `\r\n                      -Name $KeyName `\r\n                      -ErrorAction SilentlyContinue).Id;\r\n                  \r\n                  # Create New Disk Encryption Key\r\n                  if ($null -eq $diskEncrptKey) {\r\n                    $diskEncrptKey = (Add-AzKeyVaultKey `\r\n                          -VaultName $VaultName `\r\n                          -Name $KeyName `\r\n                          -Destination 'HSM').Id;                                            \r\n                  }\r\n                  \r\n                  # Get Disk Encryption Newly Created Key\r\n                  $diskEncrptKey = (Get-AzKeyVaultKey `\r\n                      -VaultName $VaultName `\r\n                      -Name $KeyName)\r\n                  # Update secret for KeK encryption with KV KeK URL\r\n                    $secretvalue = ConvertTo-SecureString $diskEncrptKey.Key.Kid -AsPlainText -Force\r\n                    $secret = Set-AzKeyVaultSecret -VaultName $VaultName -Name $kekEncryptionUrlSecretName -SecretValue $secretvalue\r\n                  # Create New Disk Encryption Set Config\r\n                  $desConfig = (New-AzDiskEncryptionSetConfig `\r\n                        -Location $LocationName `\r\n                        -SourceVaultId $kv.ResourceId `\r\n                        -KeyUrl $diskEncrptKey.Key.Kid `\r\n                        -IdentityType SystemAssigned)\r\n                      \r\n                  # Create New Disk Encryption Set\r\n                  $desEncrySet = (New-AzDiskEncryptionSet `\r\n                            -Name $DiskEncryptionSetName `\r\n                            -ResourceGroupName $ResourceGroupName `\r\n                            -InputObject $desConfig)\r\n                  # Get newly created disk encryption Set\r\n                  $des = (Get-AzDiskEncryptionSet `\r\n                      -ResourceGroupName $ResourceGroupName `\r\n                      -Name $DiskEncryptionSetName)\r\n                        \r\n                  # Add the Disk Encryption Set Application to Key Vault Access Policy\r\n                  (Set-AzKeyVaultAccessPolicy `\r\n                        -VaultName $VaultName `\r\n                        -ObjectId $des.Identity.PrincipalId `\r\n                        -PermissionsToKeys wrapkey,unwrapkey,get `\r\n                        -BypassObjectIdValidation)",
          "cleanupPreference": "OnSuccess",
          "retentionInterval": "P1D"
        }
      }   
]

  }